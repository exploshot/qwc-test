language: cpp

matrix:
    include:
        - name: "Android, Debug"
          os: linux
          dist: bionic
          sudo: required
          env:
              - CMAKE_GENERATOR_NAME="Unix Makefiles"
              - CMAKE_BUILD_TYPE="Debug"
              - CMAKE_TOOLCHAIN_FILE_NAME=android-ndk-r18b-api-21-x86-clang-libcxx.cmake
              - CTEST_REGEXP="NONE"
        - name: "Android, Release"
          os: linux
          dist: bionic
          sudo: required
          env:
              - CMAKE_GENERATOR_NAME="Unix Makefiles"
              - CMAKE_BUILD_TYPE="Release"
              - CMAKE_TOOLCHAIN_FILE_NAME=android-ndk-r18b-api-21-x86-clang-libcxx.cmake
              - CTEST_REGEXP="NONE"
        - name: "Linux, Debug"
          os: linux
          dist: bionic
          sudo: required
          env:
              - CMAKE_GENERATOR_NAME="Unix Makefiles"
              - CMAKE_BUILD_TYPE="Debug"
              - CMAKE_TOOLCHAIN_FILE_NAME=gcc-8-cxx17.cmake
              - CTEST_REGEXP="Tests$"
        - name: "Linux, Release"
          os: linux
          dist: bionic
          sudo: required
          env:
              - CMAKE_GENERATOR_NAME="Unix Makefiles"
              - CMAKE_BUILD_TYPE="Release"
              - CMAKE_TOOLCHAIN_FILE_NAME=gcc-8-cxx17.cmake
              - CTEST_REGEXP="Tests$"
        - name: "macOS, Debug"
          os: osx
          osx_image: xcode11.3
          env:
              - CMAKE_GENERATOR_NAME="Unix Makefiles"
              - CMAKE_BUILD_TYPE="Debug"
              - CMAKE_TOOLCHAIN_FILE_NAME=clang-cxx17.cmake
              - CTEST_REGEXP="Tests$"
        - name: "macOS, Release"
          os: osx
          osx_image: xcode11.3
          env:
              - CMAKE_GENERATOR_NAME="Unix Makefiles"
              - CMAKE_BUILD_TYPE="Release"
              - CMAKE_TOOLCHAIN_FILE_NAME=clang-cxx17.cmake
              - CTEST_REGEXP="Tests$"

env:
    global:
        - CTEST_LOG_REGEXP="=== EVENT \#\|SwappedVector\|\[\([a-zA-Z]\+\)\(\/[a-zA-Z0-9]\+\)\?\]"

addons:
    apt: # Linux
        packages:
            - build-essential
            - cmake
            - git
            - unzip
            - wget
            - lcov
            - rpm
            - gcc-8
            - g++-8
        sources:
            - ubuntu-toolchain-r-test
    homebrew: # macOS
        packages:
            - cmake
            - git
            - lcov

cache:
    directories:
        - $HOME/.hunter

before_install:
    - |
        if [ "$CMAKE_TOOLCHAIN_FILE_NAME" = "android-ndk-r18b-api-21-x86-clang-libcxx.cmake" ]; then
            echo "Installing Android NDK..."
            mkdir -p "$HOME/.android"
            wget -O "$HOME/.android/android-ndk-r18b-linux-x86_64.zip" "https://dl.google.com/android/repository/android-ndk-r18b-linux-x86_64.zip"
            unzip -qq "$HOME/.android/android-ndk-r18b-linux-x86_64.zip" -d "$HOME/.android"
            export ANDROID_NDK_r18b="$HOME/.android/android-ndk-r18b"
            ls -la "$ANDROID_NDK_r18b"
        fi

script:
    - |
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
            export CC=gcc-8
            export CXX=g++-8
        fi
    - mkdir ./build && cd ./build
    - >
        cmake -G "$CMAKE_GENERATOR_NAME"
        -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE
        -DCMAKE_TOOLCHAIN_FILE=cmake/polly/$CMAKE_TOOLCHAIN_FILE_NAME
        -DBUILD_ALL:BOOL=TRUE
        ..
    - cmake --build . --config $CMAKE_BUILD_TYPE -- -j 2
    - cpack -C $CMAKE_BUILD_TYPE

after_success:
    - |
        if [ "$CMAKE_TOOLCHAIN_FILE_NAME" = "android-ndk-r18b-api-21-x86-clang-libcxx.cmake" ]; then
            echo "TODO: Fix and run tests for Android and remove this 'if' statement."
        elif [ "$CMAKE_BUILD_TYPE" = "Release" ]; then
            echo "Code-coverage is only available for debug builds. Skipping..."
        else
            COVERAGE_FILE="$TRAVIS_BUILD_DIR/build/coverage.info"
            echo "coverage.info: $COVERAGE_FILE"
            lcov --capture --directory . --output-file $COVERAGE_FILE
            lcov --remove $COVERAGE_FILE "/Applications/Xcode*" "/usr/*" "*/boost/*" "*/gtest/*" "*/tests/*" "*/_ExternalProjects/*" --output-file $COVERAGE_FILE
            lcov --list $COVERAGE_FILE
            bash <(curl -s https://codecov.io/bash) -f $COVERAGE_FILE || echo "Upload to codecov.io FAILED"
        fi

deploy:
    provider: releases # GitHub Releases
    api_key:
        secure: "EyGhqgRRrc93NUMTrM00gtUjacXABkji0Uw/Ogl9dfxcrI+L0qMkdR+C783yyXOIdB4DKhc8PLK9ee1hbVEbBV1loel25iO9kEDMJ3PmF5HxRhEgwmKC6BpmG5m2joAwZpBbRsiNp/FY8Rm+2XTMwR/TzQ9K8KD0obQORNI5FM3EBbPm8WTapvSo470DrosCUNE1OPKNHspWHOQg39KaqGw7vZ435Z6E7raCYPoiW9ZiqVAqwUgpHtfpqLx3JVQElGb/1EkJ53i6OghMzavtAE3MBYzbPvjRFqibQ88FMyx7bH/q899ftG4bqYMUw5lkj4FC1/aAz0lDFXmIJPUE0l7rkY9rlzqq97IvtdipN6MrBoigY5NGNSDoijVwKmljIp/3Qf/70Nx8GoE8vcIJskwyDDuG/YWItl0Hl/mQ2M/2vXLUkRUXcJfIXM1v0i2pLdGGe9GGUvec6yK8vtOR6OefG8GseQOKm3mkUQmc7bI++4M2amWi3G1LZXCpeF32oJXtA/JTaQy8se3UNYxCKGPBYJMju8Arp2uHFdkbUtIlpzxrAjdfPi+Td4ylL0Xtp7CEYVGVCl+csW885FObCo5Qg3maKD+Re0ldDsAmQxl4ynAOmHx4N2rRFEHGd3sb/0Fukf43KEWy0nYKRXeQZK1b4ntJRN0/s8edqz09MiY="
    file: dist/qwertycoin-*
    file_glob: true
    draft: true
    on:
        branch: master
        tags: true
        condition: $CMAKE_BUILD_TYPE = "Release"
    skip_cleanup: true
